---
title: "Introducton to Baskerville"
author: "Advanced Research Computing (ARC) Team"
format:
  revealjs:
    theme: bask2.scss
    footer: Baskerville Hackathon 24/03/2025
    logo: images/BaskervilleW.svg
---

# Introduction (*And Welcome*) to Baskerville{.smaller}

# Baskerville Hackathon

## Baskerville Content {.smaller}

::: {}
1. What is Baskerville
1. Baskerville resources
1. How to access Baskerville
1. How to submit jobs to Baskerville
:::

## What is Baskerville {.smaller}

- Baskerville is a tier 2 HPC (High Performance Computer)
- It is a GPU focused system with 228 GPUs (57 nodes) in total
   - 46 Nodes with A100 GPUs
   - 11 Nodes A100-80 GPUs
- Icelake CPUs with 72 cores per node
- 5.4 PB storage

::: {.callout-note appearance="simpe"}
HyperThreading:

    Baskerville has hyperthereading enabled this means that 1 core = 2 threads/tasks

:::

## Baskerville Resources {.smaller}

Baskerville has a number of resources availible to you:

:::: {.columns}
::: {.column width="50%"}
::: {.incremental}
- <https://www.baskerville.ac.uk/> - The homepage for Baskerville, has case studies and papers published by Baskerville users
- <https://admin.baskerville.ac.uk/> - The admin site is a place to manage your Baskerville account and view user and project information
:::
:::

::: {.column width="50"}
::: {.incremental}
- <https://apps.baskerville.ac.uk/> - The apps website contains a list of all the installed applications on Baskerville
- <https://portal.baskerville.ac.uk/> - The portal site allowds users to use interactive apps in a web browser
:::
:::
::::

## Baskerville Hackathon {.smaller}

::: {.incremental}
- 24th March - 26th March you will have access to Baskerville
- Reservation of 2 nodes (8 GPUs, 144 cores and 288 threads)
   - A reservation only allows those from seltcted projects to use them this is done through the `--reservation` flag
- Everyone is part of the project `ranaaaa-hackathon`
- Other projects have more memory (5 TB) and contain the data.
:::

## Baskerville Login {.smaller}

- Everyone will receive a welcome email when being first added to Baskerville
- Email points to our documentation and instructions for first time access <https://docs.baskerville.ac.uk/logging-on/>
   - Instructions and video present to show both what to do and what not to do
- To setup your one time passcode you need an authenticator app please have this open and ready to scan your OTP
- To login you will need to username, password and OTP to access Baskerville
- Whilst ssh key option is available this is not recommended during the hackathon

## Baskerville Login Example

{{< video images/login.mp4 width="1200" height="600" >}}

## Baskerville Storage {.smaller}

:::: {.columns}
::: {.column width="50%"}
::: {.incremental}
- **home directory** `/bask/homes/_inital_/_username_`
   - When you first login, this is where you start
   - Only 20 GB of space - this is not where you run jobs
   - Should be for local and cached files
:::
:::

::: {.column width="50%"}
::: {.incremental}
- **Project Directory** `/bask/project/_initial_/_projectname_`
   - Has 5 TB space - place where you run jobs
   - Contains you data, job scripts and results
:::
:::
::::


## Baskerville User Details {.smaller}

- <https://docs.baskerville.ac.uk/storage/>
- You can inspect your details either in the [admin site](https://admin.baskerville.ac.uk/) or in the terminal:
   - `my_quota` - This shows how much of your home directory is utilised
   - `my_baskerville` - This gives your project account and QoS details

## Baskerville User Details Example


{{< video images/user.mp4 width="1200" height="600" >}}

# Baskerville jobs

## Login and Compute nodes {.smaller}

- There are 2 types of nodes on Baskerville

::: {.incremental}
   - A **login node** is where you start and Baskerville has 3 `bask-pg-login01`, `bask-pg-login02` and `bask-pg-login03`
      - Access to all Baskerville users
      - Intended for simple tasks like managing files
      - Does not have access to GPUs
      - A job submitted goes from a login node to a compute node
   - A **compute node** is the node that does the work nodes do not have login in their name      
      - When you submit a job this is where they go
:::

## Job script {.smaller}

- The most common way to run jobs is with the `sbatch` command and the name of you job script
- Your job script will contain:

::: {.incremental}
   - Job account
   - Job time
   - Job compute resources (CPUS, GPUs etc)
   - Quality of Service (QoS) for everyone in this hackathon this is `bham`
   - Other options are also availible <https://slurm.schedmd.com/sbatch.html>
:::

## Job script example {auto-animate=true}

```bash
#!/bin/bash
#SBATCH --qos=bham
#SBATCH --account=ranaaaa-hackathon
#SBATCH --time=1:0:0
#SBATCH --ntasks=4
#SBATCH --gres=gpu:1
#SBATCH --reservation=ranaaaa-hackathon

module purge
module load baskerville

# your commands
```

## Job script example {auto-animate=true}

```bash
#!/bin/bash <--- run the job using GNU Bourne Again Shell
#SBATCH --qos=bham
#SBATCH --account=ranaaaa-hackathon
#SBATCH --time=1:0:0
#SBATCH --ntasks=4
#SBATCH --gres=gpu:1
#SBATCH --reservation=ranaaaa-hackathon

module purge
module load baskerville

# your commands
```

## Job script example {auto-animate=true}

```bash
#!/bin/bash
#SBATCH --qos=bham                      <--- Using bham job queue
#SBATCH --account=ranaaaa-hackathon     <--- Hackathon project account
#SBATCH --time=0:20:0                   <--- Job to run for 20 minutes
#SBATCH --ntasks=4                      <--- Job requests 4 tasks
#SBATCH --gres=gpu:1                    <--- Requesting 1 GPU
#SBATCH --reservation=ranaaaa-hackathon <--- Use reserved resources

module purge
module load baskerville

# your commands
```

## Job script example {auto-animate=true}

```bash
#!/bin/bash
#SBATCH --qos=bham
#SBATCH --account=ranaaaa-hackathon
#SBATCH --time=1:0:0
#SBATCH --ntasks=4
#SBATCH --gres=gpu:1
#SBATCH --reservation=ranaaaa-hackathon

module purge            <--- Purging environemnt
module load baskerville <--- Loading default Baskerville modules
                        <--- Add additional module here
# your commands         <--- Commands you want to run
```

## Submitting a job {.smaller}

When you submit a job you will see:
```
sbatch job.sh
Submitted batch job 992337
```

The number (in this case `992337`) is your job id this is a unique job number


## SLURM {.smaller}

- SLURM=Simple Linux Utility for Resource Management  <https://docs.baskerville.ac.uk/jobs/#slurm-jobs>
   - SLURM is our job sceduler it decides the priority of jobs and when they start
   - Since this has a reservation jobs submitted will be outside of the general queue
   - Batch jobs are submitted with the `sbatch` command and you can monitor the job with `squeue`
   - If your job is in the queue you can use the `sbatch --start` to see an estimate of when your job will start
   - If you want to cancel a job you can use `scancel XXXX` where XXXX is the job id

## Job results file {.smaller}

::: {.panel-tabset}

## Output file .out

- A file `slurm-XXXXX.out` is created where XXXXX is the job id
- This file would be the standard output of whatever you would run
- 

## Stats file .stats

- A file `slurm-XXXXX.stats` is created where XXXXX is the job id
- Contains information on resources used (time, memory amount of CPUS and GPUs
- Will also contain the exit code so you can see if job ended correctly)

```bash
+--------------------------------------------------------------------------+
| Job on the Baskerville cluster:
| Starting at Tue Sep 28 15:00:30 2021 for auser(123456)
| Identity jobid 12345 jobname cudaopenmp.sh
| Running against project ace-project and in partition baskerville-shared
| Requested cpu=288,mem=864G,node=2,billing=288,gres/gpu=8 - 00:10:00 walltime
| Assigned to nodes bask-pg0308u30a,bask-pg0308u31a
| Command /bask/projects/a/ace-project/cudaopenmp.sh
| WorkDir /bask/projects/a/ace-project
+--------------------------------------------------------------------------+
+--------------------------------------------------------------------------+
| Finished at Tue Sep 28 15:00:35 2021 for auser(123456) on the Baskerville Cluster
| Required (00:01.942 cputime, 3580K memory used) - 00:00:05 walltime
| JobState COMPLETING - Reason None
| Exitcode 0:0
+--------------------------------------------------------------------------+
```

:::

## Baskerville Sofware {.smaller}

- You can view all the software we have installed on Baskerville thorugh our apps website <https://apps.baskerville.ac.uk/>
   - This contains a module description
   - How to load these modules
   - Links to the module homepage
- You can find specific modeules using `module spider`
- You can find modules that contain your application using `module avail`

# Thank You
